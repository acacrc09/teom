pipeline {
  environment {
        registry = "jhonjcastroh/team-ez"
        registryCredential = 'dockerhub_id' 
        dockerImage = ''
        namespace = "test-dev"
    }
  agent {
    node {
      label 'nodejs'
    }
  }
  stages {
    stage ('Checkout codigo fuente') {
      steps {
        checkout scm
      }
    }
    stage ('Instalar dependencias nexus') {
      steps {
        sh '''
          npm config set registry http://nexus-biq.apps.okd.soft1.xyz/repository/npm-ez
          npm install --verbose -d
        '''
      }
    }
    stage ('Pruebas unitarias') {
      steps {
        sh '''
          npm run unit
        '''
      }
    }
    stage ('InspecciÃ³n con Sonarqube: npm run sonar') {
      steps {
        sh '''
          npm run sonar
        '''
      }
    }
    stage ('Publicar en Nexus: npm publish') {
      steps {
        sh '''
          npm publish
        '''
      }
    }
    //stage ('Desplegar') {
      // steps {
      //   script {
      //     openshift.withCluster() {
      //       openshift.withProject('teom') {
      //         openshift.selector('bc', 'nodejs-teom-develop').startBuild('--from-dir=./', '--wait=true', '--follow', '--loglevel=8')
      //       }
      //     }
      //   }
      // }
    //}
    stage ('Build image'){
      agent {
        label 'docker-agent'
      }
      steps {
        script {
          dockerImage = docker.build registry + ":develop"
        }
      }
    }
    stage('Push image to repository'){
      agent {
        label 'docker-agent'
      }
      steps {
        script { 
          docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) { 
            dockerImage.push() 
          }
        }
      }
    }
    // stage ('Deploy aplications') {
      // steps {
        // Create namespace if it doesn't exist
        // sh("kubectl get ns ${namespace} || kubectl create ns ${namespace}")
        //Update the imagetag to the latest version
        // sh("sed -i.bak 's#gcr.io/${project}/${appName}:${imageVersion}#${imageTag}#' ./k8s/development/*.yaml")
        //Create or update resources
        // sh("kubectl --namespace=${namespace} apply -f k8s/development/deployment.yaml")
        // sh("kubectl --namespace=${namespace} apply -f k8s/development/service.yaml")
        //Grab the external Ip address of the service
        // sh("echo http://`kubectl --namespace=${namespace} get service/${feSvcName} --output=json | jq -r '.status.loadBalancer.ingress[0].ip'` > ${feSvcName}")
      // }
    // }

    stage ('Deploy on Kubernetes') {
      steps {
        script {
          kubernetesDeploy(configs: "stack.yml", kubeconfigId: "d9b27584-32a0-4b70-a303-7c7b440f5bdd")
        }
      }
    }

    stage ('Probar API con Newman: npm run newman') {
      steps {
        sh '''
          npm run newman
        '''
      }
    }
    stage ('Smoke Test JMeter: npm run performance') {
      steps {
        sh '''
        '''
      }
    }
    stage ('Probar WEB con Nightwatch') {
      steps {
        sh '''
          npm run unit
        '''
      }
    }
  }
}



pipeline {   
  agent any   
  environment {       registry = "magalixcorp/k8scicd"       GOCACHE = "/tmp"   }   
  stages {       
    stage('Build') {           
      agent {               
        docker {                   image 'golang'               }           
      }           
      steps {               
        // Create our project directory.               
        sh 'cd ${GOPATH}/src'               
        sh 'mkdir -p ${GOPATH}/src/hello-world'               
        // Copy all files in our Jenkins workspace to our project directory.                              
        sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'               
        // Build the app.               
        sh 'go build'                         
      }           
    }       
    
    stage('Test') {           
      agent {               docker {                   image 'golang'               }           }           
      steps {                               
        // Create our project directory.               
        sh 'cd ${GOPATH}/src'               
        sh 'mkdir -p ${GOPATH}/src/hello-world'               
        // Copy all files in our Jenkins workspace to our project directory.                              
        sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'               
        // Remove cached test results.               
        sh 'go clean -cache'               
        // Run Unit Tests.               
        sh 'go test ./... -v -short'                      
      }       
    }       
    
    stage('Publish') {           
      environment {               registryCredential = 'dockerhub'           }           
      steps{               
        script {                   
          def appimage = docker.build registry + ":$BUILD_NUMBER"                   
          docker.withRegistry( '', registryCredential ) {                       
            appimage.push()                       
            appimage.push('latest')                   
          }               
        }           
      }       
    }       
    
    stage ('Deploy') {           
      steps {               
        script{                   
          def image_id = registry + ":$BUILD_NUMBER"                   
          sh "ansible-playbook  playbook.yml --extra-vars \"image_id=${image_id}\""               
        }           
      }       
    }   }}